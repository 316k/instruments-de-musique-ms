'**************************************************************************
'*            Microsoft Multimedia Publishing Group Setup
'*                   Microsoft Musical Instruments
'*       (c) 1993 Microsoft Corporation.  All Rights Reserved.
'**************************************************************************

'$DEFINE DEBUG  ''Define for script development/debugging
'$DEFINE MERISMUS  ''Define for Merismus Editorial support DLL

'$INCLUDE 'setupapi.inc'
'$INCLUDE 'msdetect.inc'

'User disk profile
CONST NEEDEDHDSPACE  = 750000

''Dialog ID's
CONST WELCOME       = 100
CONST ASKQUITDLG    = 200
CONST DESTPATH      = 300
CONST DESTPATH_EXISTING      = 1000
CONST EXITFAILURE   = 400
CONST EXITQUIT      = 600
CONST EXITSUCCESS   = 700
CONST EXITSUCCESS_OVERVIEW   = 1100
CONST EXITSUCCESS_NORESTART  = 1800
CONST OPTIONS       = 800
CONST APPHELP       = 900
CONST BADPATH       = 6400
CONST ASKVIDEOMODE  = 1200
CONST CHECKVIDEO    = 1300
CONST PALEXPLAIN    = 1400
CONST MAILMAN       = 1500
CONST ACTIVATEFONTS = 1700
CONST TOOBIG        = 6300

CONST ASKNEWADPCM   = 2100

CONST ASKCONFIGADPCM  =  2200
CONST NEWADPCM        =  2600
CONST NEWSYSTEMSOFTWARE      =     2300
CONST WARNNOSYSSOFT          =     3100

CONST TGRPBOXID     = 3742


''Bitmap ID
CONST LOGO = 1

GLOBAL SRCDIR$      '' CD root path (location of setup.exe)
GLOBAL VIDEO$       '' Windows Video Driver type (VGA or 8514)
GLOBAL MUSICINI$    '' Fully-qualified path to MSINSTR.INI
GLOBAL SYSINI$      '' Fully-qualified path to SYSTEM.INI
GLOBAL WININI$      '' Fully-qualified path to WIN.INI
GLOBAL DEST$        '' Default destination directory.
GLOBAL OPTCUR$      '' Option selection from option dialog.
GLOBAL CUIDLL$      '' Name of Custom User Interface DLL
GLOBAL VIDACT$      '' Stores user decision to use Palettized VGA.
GLOBAL MUSTRESTART$ '' Stores user decision to install system software.
GLOBAL TARGRP$

'$INCLUDE 'mmperf.inc'
'$INCLUDE 'adpcm.inc'
'''''$INCLUDE 'mmmovie.inc'     ''-- no movies in French MI
'''''$INCLUDE 'mmcat.inc'       ''-- no MM catalog in French version of MI.


DECLARE FUNCTION ShowWindow LIB "user" (Hwnd%, nCmdShow%) As Integer

DECLARE SUB Install     '' Modify for specific runtimes
DECLARE SUB InstallFonts    '' Modify for custom fonts

DECLARE FUNCTION MakePath (szDir$, szFile$) AS STRING



'**************************************************************************
'**  General Installation Script
'**************************************************************************
INIT:
	CUIDLL$ = "mscuistf.dll"            ''Custom user interface dll
	HELPPROC$ = "FHelpDlgProc"          ''Help dialog procedure

	i% = ShowWindow( HwndFrame(), 3 )
	SetBitmap CUIDLL$, LOGO
	SetTitle "Installation de Microsoft Les instruments de musique"

	'AddToBillboardList CUIDLL$, MAILMAN, "MailmanDlgProc", 1000

	szInf$ = GetSymbolValue("STF_SRCINFPATH")
	If szInf$ = "" Then
		szInf$ = GetSymbolValue("STF_CWDDIR") + "SETUP.INF"
	End If
	ReadInfFile szInf$

	OPTCUR$ = "2"

	SRCDIR$   = GetSymbolValue("STF_SRCDIR")
	MUSICINI$ = MakePath(GetWindowsDir(),"MSINSTR.INI")
	SYSINI$   = MakePath(GetWindowsDir(),"SYSTEM.INI")
	WININI$   = MakePath(GetWindowsDir(),"WIN.INI")

' Initialize the Video mode here ...
	VIDEO$ = "VGA"


INITWINCHECK:
	If ((GetWindowsMajorVersion() = 3) And (GetWindowsMinorVersion() >= 1)) Or (GetWindowsMajorVersion() > 3) Then
		'Version of Windows is OK.  Continue with Setup...
	Else
''      i% = DoMsgBox("Microsoft Musical Instruments requires Windows 3.1 or greater.","Setup Failed", MB_TASKMODAL+MB_ICONHAND+MB_OK)
		i% = DoMsgBox("Microsoft Les instruments de musique fonctionne sous la version 3.1 ou ultérieure de Windows.","L'installation a échoué", MB_TASKMODAL+MB_ICONHAND+MB_OK)
		dlg% = EXITFAILURE
		GOTO QUITL3
	End If

WELCOME:
	sz$ = UIStartDlg(CUIDLL$, WELCOME, "FInfoDlgProc", APPHELP, HELPPROC$)
	If sz$ = "CONTINUE" Then
		UIPop 1
	Else
		GOSUB ASKQUIT
		GOTO WELCOME
	End If

VIDL1:
	VIDACT$ = "NOSWITCH"
	sz$ = UIStartDlg(CUIDLL$, CHECKVIDEO, "FInfoVideoDlgProc", 0, "")
	If sz$ = "REACTIVATE" Then
		GOTO VIDL1
	End If
	UIPop 1
	If sz$ = "SUBVGA" Then
		i% = DoMsgBox( "Le guide multimédia de Microsoft Les instruments de musique doit fonctionner en mode d'affichage VGA.", "L'installation a échoué", MB_OK+MB_TASKMODAL+MB_ICONHAND)
		dlg% = EXITFAILURE
		GOTO QUITL3
	End If
	sz$ = "VIDEOISOK"

WINNTDISCLAIMERS:
	If RunningNT() <> 0 Then
		szVideoResult$ = GetSymbolValue( "DIAG_VIDEO" )

		If szVideoResult$ = "16COLOR" Then
'i%=DoMsgBox("Microsoft Les instruments de musique ne fonctionnent pas en mode d'affichage 16 couleurs sous Windows NT. Pour plus d'informations, consultez le fichier Lisezmoi.","Message d'installation",MB_OK+MB_TASKMODAL+MB_ICONEXCLAMATION)
i% = DoMsgBox( "Microsoft Les instruments de musique ne fonctionnent pas en mode d'affichage 16 couleurs sous Windows NT.", "Message d'installation", MB_OK+MB_TASKMODAL+MB_ICONEXCLAMATION)
		End If
	End If      


DOPERFCHECK:
	GoSub SYSCHECK

GETPATH:
	DEST$ = "C:\MSINSTR"

	SetSymbolValue "EditTextIn", DEST$
	SetSymbolValue "EditFocus", "END"


GETPATHL1:
	sz$ = UIStartDlg(CUIDLL$, DESTPATH, "FEditDlgProc", APPHELP, HELPPROC$)

	DEST$ = GetSymbolValue("EditTextOut")

	If sz$ = "CONTINUE" Then
		If IsDirWritable(DEST$) = 0 Then
			GOSUB BADPATH
			GOTO GETPATHL1
		End If
		If GetFreeSpaceForDrive( MID$( DEST$, 1, 1 ) ) < NEEDEDHDSPACE Then
			GOSUB DRIVEFULL
			UIPop 1
		End If
		If DoesDirExist( DEST$ ) = 0 Then
		i% = DoMsgBox( "Le répertoire spécifié n'existe pas. Souhaitez-vous le créer ?", "Emplacement de l'installation", 8228)
		If i% = 7 Then
			GOTO GETPATHL1
		End If
		End If
		UIPop 1
	ElseIf sz$ = "REACTIVATE" Then
		GOTO GETPATHL1
	ElseIf sz$ = "BACK" Then
		UIPop 1
		GOTO WELCOME
	Else
		GOSUB ASKQUIT
		GOTO GETPATHL1
	End If

''*****************************************************************

	Install

''*****************************************************************

QUIT:
	ON ERROR GOTO ERRQUIT

	If ERR = 0 Then
		If MUSTRESTART$ = "SWITCH" Then
			dlg% = EXITSUCCESS_OVERVIEW
		GOTO MAILMANDLG
		Else        
			dlg% = EXITSUCCESS_NORESTART
		GOTO MAILMANDLG
		End If
	ElseIf ERR = STFQUIT Then
		END
	Else
		dlg% = EXITFAILURE
		GOTO QUITL3
	End If

QUITL3:
	sz$ = UIStartDlg(CUIDLL$, dlg%, "FInfo0DlgProc", 0, "")
	If sz$ = "REACTIVATE" Then
		GOTO QUITL3
	ElseIf sz$ = "README" Then
		If DoesFileExist ((MakePath (GetWindowsDir(), "notepad.exe")), femExists) = 1 Then
			RUN "NOTEPAD.EXE" + " " + MakePath(DEST$,"LISEZMOI.TXT"), NOWAIT
		Else
			i% = DoMsgBox( "Le Bloc-notes n'est pas installé.", "Installation de Microsoft Les instruments de musique", MB_OK+MB_TASKMODAL+MB_ICONHAND)
		End If
		GOTO QUITL3
	ElseIf sz$ = "RESTART" Then
		ForceRestartOn
		i% = ExitExecRestart()
		i% = DoMsgBox( "Pour que la nouvelle configuration du système entre en vigueur, quittez puis redémarrez Windows.", "Echec du redémarrage", MB_OK+MB_TASKMODAL+MB_ICONHAND)
	ElseIf sz$ = "EXIT" Then
		If MUSTRESTART$ = "SWITCH" Then
			i% = DoMsgBox( "Pour que la nouvelle configuration du système entre en vigueur, quittez puis redémarrez Windows.", "Installation de Microsoft Les instruments de musique", MB_OK+MB_TASKMODAL+MB_ICONHAND)
		End If
	End If
	UIPop 1

	END

DIAG_QUIT:
	dlg% = EXITFAILURE
	GOTO QUITL3

MAILMANDLG:
	sz$ = UIStartDlg(CUIDLL$, MAILMAN, "MailmanDlgProc", APPHELP, HELPPROC$)
	UIPop 1
	GOTO QUITL3

ERRQUIT:
	i% = DoMsgBox("Les sources d'installation sont corrompues. Recherchez un numéro de téléphone de support technique dans votre manuel.", "Erreur d'installation", MB_OK+MB_TASKMODAL+MB_ICONHAND)
	END



BADPATH:
	sz$ = UIStartDlg(CUIDLL$, BADPATH, "FInfo0DlgProc", 0, "")
	If sz$ = "REACTIVATE" Then
		GOTO BADPATH
	End If
	UIPop 1
	RETURN



DRIVEFULL:
	sz$ = UIStartDlg(CUIDLL$, TOOBIG, "FInfo0DlgProc", 0, "")
	If sz$ = "REACTIVATE" Then
		GOTO DRIVEFULL
	End If
	UIPop 1
	RETURN



ASKQUIT:
	sz$ = UIStartDlg(CUIDLL$, ASKQUITDLG, "FQuitDlgProc", 0, "")

	If sz$ = "EXIT" Then
		UIPopAll
		ERROR STFQUIT
	ElseIf sz$ = "REACTIVATE" Then
		GOTO ASKQUIT
	Else
		UIPop 1
	End If
	RETURN




'*************************************************************************
'**
'** Install
'** -------
'**
'** Purpose:
'**     Builds the copy list and performs all installation operations.
'** Arguments:
'**     none.
'** Returns:
'**     none.
'*************************************************************************
SUB Install STATIC

	SrcDir$ = GetSymbolValue("STF_SRCDIR")
	CreateDir DEST$, cmoNone
	WinDir$ = GetWindowsDir()
	SysDir$ = GetWindowsSysDir()

	SetRestartDir DEST$
	AddSectionFilesToCopyList "Executable", SrcDir$, DEST$
	AddSectionFilesToCopyList "Files", SrcDir$, DEST$


SYSFILESTUFF:
	If RunningNT() <> 0 Then
		' NT has all this stuff built in.
		GoTo ASKTARGET
	End If

	'CopyMMMFiles       '-- no movies in French MI
	NEEDSYSCOPY% = 1
	
	' Check to see if we need to install ADPCM.
	IF DoesFileExist ((MakePath (SysDir$, "msacm.drv")), femExists) = 1 Then
		IF DoesFileExist ((MakePath (SysDir$, "msadpcm.acm")), femExists) = 1 Then
			NEEDSYSCOPY% = 0
		END IF
	END IF

	If NEEDSYSCOPY% = 0 Then
		GoTo ASKTARGET
	End If


ADPCM1:

	sz$ = UIStartDlg(CUIDLL$, NEWSYSTEMSOFTWARE, "FInfo0DlgProc", 0, "")
	If sz$ = "REACTIVATE" Then
		GOTO ADPCM1
	End If
	UIPop 1
	If sz$ = "VIDSWITCH" Then
		CopyADPCMFiles  
		MUSTRESTART$ = "SWITCH"
	ElseIf sz$ = "README" Then

ADPCM11:
		sz$ = UIStartDlg(CUIDLL$, NEWADPCM, "FInfo0DlgProc", 0, "")
		If sz$ = "REACTIVATE" Then
			GOTO ADPCM11
		End If  
		UIPop 1
		GOTO ADPCM1

	ElseIf sz$ = "CANCEL" Then

ADPCM12:
		sz$ = UIStartDlg(CUIDLL$, WARNNOSYSSOFT, "FInfo0DlgProc", 0, "")
		If sz$ = "REACTIVATE" Then
			GOTO ADPCM12
		ElseIf sz$ = "BACK" THEN 
			UIPop 1
			GOTO ADPCM1
		End If  
		UIPop 1

		
	End If


ASKTARGET:
	sz$ = UIStartDlg(CUIDLL$, TGRPBOXID, "GBOXDlgProc", 0, "")
	If sz$ = "REACTIVATE" Then
		GOTO ASKTARGET
	ElseIf sz$ = "CANCELPRESSED" Then
		UIPop 1
		GOSUB DOYAWANNAQUIT
		GOTO ASKTARGET
	End If
	UIPop 1

	If RTrim$(sz$) = "" Then
		sz$ = "Microsoft Multimedia"
	End If
	TARGRP$ = sz$
	SetSymbolValue "TARGETGROUP", sz$


COPYAPPFILES:
	SetCopyGaugePosition 15, 125
	CopyFilesInCopyList

	''SetupMMCatalog        ''-- no MM catalog in French version of MI

	CreateProgManGroup TARGRP$, "", cmoNone
	ShowProgManGroup   TARGRP$, 1,  cmoNone

	EXE$ = MakePath( DEST$, "msinstr.exe" )
	CMDLINE$ = MakePath( DEST$, "msinstr.the" )

	CreateProgManItem TARGRP$, "Les instruments de musique", EXE$, EXE$, cmoOverwrite
	CreateProgManItem TARGRP$, "Lisez-moi : Conseils d'utilisation", "NOTEPAD.EXE " + MakePath(DEST$, "lisezmoi.txt") , "", cmoOverwrite

	''MMCatSetProgman       ''-- no MM catalog in French version of MI

	SrcDrive$ = MID$(SrcDir$, 1, 1)         

	CreateIniKeyValue MUSICINI$, "Musique", "CD", SrcDrive$ + ":", cmoOverwrite
	CreateIniKeyValue MUSICINI$, "Musique", "Command", CMDLINE$, cmoOverwrite
   CreateIniKeyValue MUSICINI$, "Musique", "Directory", DEST$ + "\", cmoOverwrite
	CreateIniKeyValue MUSICINI$, "Musique", "UNCPath", "", cmoOverwrite
	'CreateIniKeyValue WININI$, "Sounds", "MSInstrOpen", ",Musical Instr. Open", cmoOverwrite

	If RunningNT() = 0 Then
		SetADPCMIniFiles
		'SetMMMIniFiles
	End If

	GOTO INSTSUBEND



DOYAWANNAQUIT:
	sz$ = UIStartDlg(CUIDLL$, ASKQUITDLG, "FQuitDlgProc", 0, "")

	If sz$ = "EXIT" Then
		UIPopAll
		ERROR STFQUIT
	ElseIf sz$ = "REACTIVATE" Then
		GOTO DOYAWANNAQUIT
	Else
		UIPop 1
	End If
	RETURN


INSTSUBEND:
	END SUB




'*************************************************************************
'**
'** MakePath
'** --------
'** Purpose:
'**     Appends a file name to the end of a directory path,
'**     inserting a backslash character as needed.
'** Arguments:
'**     szDir$  - full directory path (with optional ending "\")
'**     szFile$ - filename to append to directory
'** Returns:
'**     Resulting fully qualified path name.
'*************************************************************************
FUNCTION MakePath (szDir$, szFile$) STATIC AS STRING
	If szDir$ = "" Then
		MakePath = szFile$
	ElseIf szFile$ = "" Then
		MakePath = szDir$
	ElseIf MID$(szDir$, LEN(szDir$), 1) = "\" Then
		MakePath = szDir$ + szFile$
	Else
		MakePath = szDir$ + "\" + szFile$
	End If
END FUNCTION
